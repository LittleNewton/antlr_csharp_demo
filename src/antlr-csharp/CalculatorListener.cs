//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CalculatorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public interface ICalculatorListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCalc([NotNull] CalculatorParser.CalcContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.calc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCalc([NotNull] CalculatorParser.CalcContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumber([NotNull] CalculatorParser.NumberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>number</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumber([NotNull] CalculatorParser.NumberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>infixExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInfixExpr([NotNull] CalculatorParser.InfixExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>infixExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInfixExpr([NotNull] CalculatorParser.InfixExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>plusOrMinusExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusOrMinusExpr([NotNull] CalculatorParser.PlusOrMinusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plusOrMinusExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusOrMinusExpr([NotNull] CalculatorParser.PlusOrMinusExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParensExpr([NotNull] CalculatorParser.ParensExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="CalculatorParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParensExpr([NotNull] CalculatorParser.ParensExprContext context);
}
